#+title: Linux em: “Vamos adotar um pinguim!”
#+author: Matheus de Souza Pessanha
#+email: 00119110328@pq.uenf.br

* Afinal, o que é Linux?
  [[../imagens/linux_logo.png]]

  - Linux é um Kernel (núcleo) ([[https://linux.org]])
  - TODOS os sistemas operacionais possuem um Kernel
  - Open Source (código aberto)
  - Criado por Linus Torvalds
  - Não faz sentido comparar com Windows ou macOS
  - Linux Foundation
  - Está em quase todos os lugares
    Exemplos:
    1. Televisões
    2. Carros autônomos
    3. Aviões
    4. Satélites
    5. Servidores e Cloud Computing
    6. Android
  
  Código fonte: [[https://github.com/torvalds/linux]]

** Kernel?
   - Meio do caminho entre o hardware e o sistema operacional
   - É como se fosse um tradutor de mensagens entre ações do SO e o hardware
   - Essas "mensagens" são chamadas de syscalls (system calls)

** Linux Foundation
   [[../imagens/lf_logo.png]]
   
   - Consórcio de grandes empresas
   - Gerencia pagamentos de desenvolvedores fixos
   - Sugere padrões para um SO que usa o Linux como Kernel
   - Apoia uso de tecnologias Open Source
   - Melhorias e modificações no Kernel são compartilhadas com a comunidade
* Estrutura dos diretórios
  [[../imagens/linux_folders.jpeg]]

  - Diretórios são pastas
  - Baseado no sistema UNIX
  - Tudo no Linux são arquivos

  CASO EXISTA UMA LOGO DE ATENÇÃO, SIGNIFICA QUE MODIFICAR ESSE DIRETÓRIO PODE QUEBRAR SEU SISTEMA!!!
  ESTEJAM AVISADOS

** root ou "/" (Raiz ou Barra)
   [[../imagens/root_ls.png]]

   - Diretório raiz (como se fosse o ~C:\~ do Windows)
   - Os nomes dos diretórios geralmente são abreviações em inglês
   - Segue o padão FHS (Filesystem Hierarchy Standard), mantido pela Linux Foundation
   - Todos os outros diretórios e subpastas estão localizados aqui
   - Alguns diretórios são links simbólicos (atalhos)
   - Alguns necessitam de permissões de administrador para
     serem modificados ou até visualizados

** /bin (Binaries ou Binários)
   - Link simbólico para "usr/bin"
   - Abriga todos os comandos que podem ser usados no terminal
   - Inclui novos comandos quando um novo software é instalado
   - Pode ser comparada com o "C:\Arquivos\ de\ Programas" do Windows
   - Apenas os ~.exe~ ficam aqui

** /boot (Inicialização do SO)
   [[../imagens/warning_logo.png]]

   - Pasta onde ficam as configurações para que o seu SO inicie corretamente
   - SÓ MEXA NESSA PASTA CASO SEJA EXTREMAMENTE NECESSÁRIO!!!
   - Gerencia o bootloader, o grub e as entradas pro Kernel
   - Possui o executável do "memtest" para testes de memória RAM

** /dev (Devices)
   [[../imagens/warning_logo.png]]

   - Possui arquivos que represetam seu hardware, como:
     1. Webcam
     2. Microfone
     3. Fones de ouvido
     4. Teclado
     5. Discos (HD ou SSD)
	- Discos são representados com "sd" e uma letra
	- Cada partição é representada como um número
	- Exemplos: ~sda~, ~sda1~, ~sdb2~
   - Possui um "buraco negro", ou ~/dev/null~, que perde toda a informação que recebe
     - Pode engolir o sistema inteiro se utilizado de forma errônea

** /etc ("Et cetera")
   - Guarda configurações do sistema de forma global

** /home (Casa)
   - Aqui ficam as pastas com os nomes dos usuários do sistema
   - Cada usuário possui configurações específicas que não são acessadas por outros usuários
   - Dentro da pasta do respectivo usuário, existe:
     1. Pastas genéricas como "Desktop" ou "Imagens"
     2. Arquivos ocultos:
	- ~/home/user/.cache~ -> guarda o cache da sessão (login) atual
        - Arquivos de configuração de softwares específicos

** /lib, /lib32, /lib64 /libx32 (Library ou Biblioteca)
   - São links simbólicos (atalhos) para ~/usr~, ex: ~/lib~ -> ~/usr/lib~
   - Guarda as bibliotecas necessárias de cada software!
   - Essas "libs" podem ser comparadas com as "DLLs" do Windows
   - O nome das pastas represetam a arquitetura a qual elas guardam os arquivos

** /media (Mídias)
   - Guarda os arquivos que representam mídias externas, como:
     1. Pendrives
     2. HDs externos
     3. Unidades de redes
   - Geralmente são montados automaticamente

** /mnt (Mount ou Ponto de montagem)
   - Irmão do ~/media~
   - Você pode montar as unidades onde quiser no sistema, mas essa é uma pasta de sugestão
   - Tem a finalidade de abrigar as montagens de dispositivos feitas manualmente pelo usuário
   - Leva em consideração o arquivo ~/etc/fstab~

** /opt (Optional ou Opicional)
   - Gerealmente fabricantes que fazem computadores com Linux, guardam configurações aqui
   - Também pode abrigar um software proprietário (como o Google Chrome)
     - Na pasta ~/usr/bin~ encontramos o binário do ~google-chrome-stable~, que é um link
       simbólico para ~/opt/google/chrome/google-chrome~

** /proc (Processes ou Processos)
   [[../imagens/warning_logo.png]]

   - Diretório virtual, ou seja, ele não é escrito no seu disco rígido
   - Representa cada processo do SO como um arquivo, ex: cada aba do chrome é um processo
   - Cada processo tem um ~ID~ ou ~PID~ -> Process Identity, um número que representa ele
   - Gerado todas as vezes que seu computador inicia

** /root (Um "/home" para o administrador)
   [[../imagens/warning_logo.png]]

   - Fica separado do ~/home~ para poder ter permissões especiais
   - Tendo o ~/home~ separado, você pode logar como root e restaurar o sistema

** /run (Runtime)
   - Outro diretório virtual
   - Guarda informações do sistema desde o último boot
   - Diretório novo no padrões FHS

** /sbin (System Binaries ou Binários de sistema)
   - Link simbólico para ~/usr/sbin~
   - Guarda os executáveeis dos programas que precisam de permissões de admin para serem executados

** /snap (Referência aos pacotes SNAP)
   - Diretório mais novo no padrão FHS
   - Abriga os softwares instalados via SNAP
   - SNAP é um forma diferente de empacotamento e distribuição de software
   - Mantido pela Canonical (que também mantem o Ubuntu)

** /srv (Services ou Serviçoes)
   - Geralmente fica vazia
   - Caso a máquina seja um servidor, ela pode abrigar os diferentes arquivos
     que são acessíveis para os outros usuários
   - Pode ser montada em discos externos
   - Por estar na raiz do sistema, permite a criação de permissões diferentes para cada arquivo

** /sys (System ou Sistema)
   [[../imagens/warning_logo.png]]

   - Permite que você interaja diretamente com o Kernel Linux
   - Armazena os drivers, firmwares ou "módulos"
   - Também é virtual, criado em todo boot

** /tmp (Temp ou Temporário)
   - Armazena arquivos temporários
   - Apagado em todo reboot
   - Pode ser implementado usando o sistema de arquivos virtual chamado TMPFS
   - Arquivos geralmente são pequenos
   - Perfeito para compilar software a ser instalado!
   - Pode guardar arquivos de recuperação

** /usr (User, Usuário ou "Unix System Resources")
   - Foi modificada ao longo do tempo
   - Antigamente era onde a ~/home~ ficava
   - Guarda arquivos e bibliotecas úteis para os usuários mas que não são vitais para o sistema

*** /usr/local
    - Programas instalados via código fonte guardam suas informações aqui
    - Abriga as fontes do sistema, ícones e outros

    ps: Em ~/home/user~ também existe um diretório ~.local~, que possui a mesma função!
   
** /var (Variable ou Variável)
   - Armazena arquivos que são esperados em aumentar de tamanho
   - Guarda arquivos de backup, logs, cache do sistema

** Caminhos (Paths)
Os caminhos (pastas) nos sistemas UNIX, são representaos da seguinte forma:
- Cada pasta é separada por uma ~/~
- A pasta no nível hierárquico acima é representada com ~..~
- O diretório atual é representado por ~.~

Exemplos:
- ~/~ -> pasta root/raiz
- ~/home~ -> pasta home
- ~/home/user~ -> pasta do usuário ~user~, dentro de ~home~
- ~/home/user/..~ -> pasta ~home~, pois no final do caminho voltamos um nível acima
* Usuários e Grupos
  São utilizados pelo GNU/Linux para organizar e controlar os acessos ao sistema operacional.

** Usuário
   - Qualquer um que usa o computador, geralmente representado pelo nome da pessoa
   - Usuários comuns possuem permissões distantas e restritas ao sistema
   - Esses usuários comuns podem acessar programas/arquivos de sistema com os
     comandos ~su~ ou ~sudo~

*** Root user
    - Possui acesso completo a todos os arquivos do sistema

** Grupos
   - Conjunto de permissões
   - Usuários pertencem à grupos, herdando suas respectivas permissões
   - O mais comum é o grupo ~wheel~, que representa quais usuários
     podem pedir permissões de administrador de forma temporária

  /NO WINDOWS, DÊ REBOOT, NO LINUX, SEJA ROOT/

* Permissões
  [[../imagens/root_ls.png]]

  - Lembrem que tudo no Linux é representado por arquivos!
  
  Existem 3 tipos de permissões no Linux:
  1. Read (Leitura) ou ~r~
  2. Write (Escrita) ou ~w~
  3. Execute (Executar) ou ~x~

  Cada arquivo ou pasta possui um usuário owner (dono), group owner (grupo a qual o dono pertence)
  e as permissões para os outros usuários de outros grupos.

  Na imagem de exemplo, as permissões são representadas por 10 caracteres na primeira
  coluna do comando ~ls~. Vamos distrinchar isso:

           
  Exemplo: 

  #+begin_example
   0123456789
  ~----------~
  #+end_example

  O primeiro caractere representa o tipo do arquivo:
  - ~d~ se for uma pasta
  - ~l~ se for um link simbólico
  - ~.~ se for um arquivo comum

  Após esse primeiro caractere, os 9 seguintes são agrupos de 3 em 3, sendo:
  - Os 3 primeiros representando as permissões do usuário que criou o arquivo
  - Os 3 seguintes são as permissões do grupo o qual o dono do arquivo pertence
  - Os 3 últimos mostram as permissões dos demais usuários

  Exemplos:
  ~drwxr-xr-x~
  - Significa que é uma pasta, o dono do arquivo possui todas as permissões;
  - o grupo a qual o dono pertence pode ler e executar o arquivo e demais usuários só podem executá-lo.

  ps: Permissão de executar uma pasta significa que você pode entrar nela!

  ~.rw-r--r--~
  - É um arquivo comum, o dono pode ler e escrever; o grupo do dono e demais usuários
    só podem ler.

* STDIO
  - Significa "Standard I/O Stream" (Fluxo de entrada e saída padrões)

  Todos os comandos e programas no Linux funcionam desse jeito:
  - Recebem ou não uma entrada, ou seja, um valor inicial, ou melhor ainda: um parâmetro
  - Processam, modificando ou não essa entrada
  - Devolve, ou melhor: retorna, uma saída

** Entrada (STDIN)
   - STDIN significa: "Standard Input" (Entrada padrão)
   - Os programas e comandos possuem vários tipos de entrada para receber dados.

   Exemplo:
   Existe o comando ~cd~, o qual recebe como entrada uma pasta

** Saída (STDOUT)
   - STDOUT significa: "Standard Output" (Saída Padrão)
   - Essa saída pode significar
     1. Efeitos colaterais no sistema, como deletar, criar ou modificar arquivos
     2. Produzir um conteúdo em texto

   Além dessa saída padrão, é retornado um código que representa se o comando foi
   executado corretamente ou ocorreu algum erro.

   O padrão é:
   1. Retornar 0 caso foi executado corretamente
   2. Retornar 1 caso tenha tido algum erro

*** Saída de erro (STDERR)
    Essa é uma saída (output) especial:
    - Guarda as mensagens de erros geradas pelos programas/comandos

* Ambientes Gráficos
  Ok, por enquanto vimos tudo no terminal e de forma "baixo nível", porém, para um
  sistema operacional ser usado por usuários comuns, é inviável que a única forma seja
  pelo terminal. Por isso, existem os DEs (Desktop Environments, "Ambientes Gráficos").

  Mas antes vamos ver as diferenças entre GUIs e CLIs:

** CLIs (Command Line Interface ou Interface de Linha de Comando)
   Permite o acesso global ao sistema de forma simples e direta, porém
   é necessário ter conhecimento dos comandos. Pode ser intuitivo, mas geralmente
   afasta a maioria das pessoas.

*** Vantagens
    - Pouco uso de memória RAM
    - Alto desempenho
    - Menos flexivel do que uma GUI
    - Geralmente se usa só o teclado
    - Perfeita para tarefas complexas do SO

*** Desvantagens
    - Assustador para leigos
    - Não possui tanta interatividade quanto uma GUI
    - Multitarefa não são tão simples

** GUIs (Graphic User Interface ou Interface Gráfica de Usuário)
   Possui restrições de acesso ao sistema; é facilmente aprendida e ensinada;
   costuma ser direcionadas para usuários finais ou "comuns".

*** Vantagens
    - Curva de aprendizado quase ínfima
    - Altamente customizável
    - Completamente flexivel
    - Multitarefa costuma ser algo simples

*** Desvantagens
    - Médio ou baixo desempenho geral
    - Médio a alto consumo de memória
    - Não possui formas de realizar atividades mais complexas*

    *: Na verdade, toda ação de um sistema operacional pode ter uma GUI, porém
       existem algumas tarefas que ou não fazem sentido ter uma ou são de fato difíceis de implementar.

** Exemplos
   Aqui estão alguns exemplos de DEs para Linux:

*** GNOME
    [[../imagens/gnome_screenshot.png]]

    - O mais conhecido
    - Relativamente minimalista
    - Um workflow diferenciado
    - DE padrão do Ubuntu

*** XFCE
    [[../imagens/xfce_screenshot.png]]

    - Consumo de memória reduzido
    - Não é tão flexivel
    - Bastante minimalista

*** KDE
    [[../imagens/kde_screenshot.png]]

    - O mais "bonito" inicialmente
    - Alto consumo de memória
    - Extremamente intuitivo

*** WMs (Window Managers ou Gerenciadores de Janelas)
    São um tipo especial de GUI: eles organizam as janelas dos programas de
    forma automática!

    Tendem a ser extremamente customizáveis e programáveis, por isso, não possuem um
    design incial, você é quem vai montar ele pelas configurações.

    Existe um termo na internet chamado "ricer", que é denominado a quem gosta de
    deixar seu desktop com WM o mais elegante e chamativo possível!

    Os screenshots que vou mostrar não vão apresentar tantas diferenças visuais, pois o
    núcleo das diferenças entre WMs estão nos seus respectivos arquivos de configuração.

**** Vantagens
     - Consumo de memória extremamente baixo
     - Completamente customizável
     - Totalmente modificável

**** Desvantagens
     - Necessita configuração escrita em algum arquivo
     - Curva de aprendizado elevada

**** I3
     [[../imagens/i3_screenshot.png]]

     - Porta de entrada para as WMs
     - Fácil configuração para leigos e não programadores

**** awesome
    [[../imagens/awesome_screenshot.png]]

    - Utiliza a linguagem de programação "Lua" (linguagem brasileira criada na USP)

**** xmonad 
     [[../imagens/xmonad_screenshot.png]]

     - Configurado com a linguagem de programação "Haskell"

* Distros
  Uma distro ou "distribuição" reúne tudo o que falamos anteriormente e se propõe a ser
  um sistema operacional completo - agora sim pode comparar com Windows/macOS.

  Vamos resumir assim:
  - Linux é o Kernel; 
  - composto pelos GNU Shell Utilities (ou utilitários para shell) - uma CLI - e/ou
    por um por um servidor gráfico (X.Org ou Wayland);
  - Um DE (Desktop Environment) executa um servidor gráfico, o que dá acesso à GUIs;
  - uma distro é um conjunto de programas pré-selecionados e instalados, possuindo um DE ou não.
    Uma distro é de fato um Sistema Operacional, baseado no Linux.

  Lembre que tudo (ou quase tudo) no mundo Linux é Open Source, ou seja: possui o
  código fonte aberto e geralmente é gratuito para uso.

** Exemplos
*** Ubuntu
    [[../imagens/ubuntu_screenshot.png]]

    - O mais famoso
    - Utiliza o GNOME como DE mas possui outras versões
    - Baseado na distro Debian
    - Tende a ser estável

*** Manjaro
    [[../imagens/manjaro_screenshot.png]]

    - Baseado no Arch Linux
    - Usa o KDE plasma como DE principal mas possui diversas versões com outros DEs
    - Rolling Release (sempre possui atualizações compatíveis com as versões anteriores)

* Referências
1. Viva o Linux:  [[https://www.vivaolinux.com.br]]
2. Canal Diolinux: [[https://www.youtube.com/channel/UCEf5U1dB5a2e2S-XUlnhxSA]]
3. Blog Diolinux: https://diolinux.com.br/linux/10-dicas-para-novos-usuarios-de-linux.html
4. Arch wiki: https://wiki.archlinux.org/
